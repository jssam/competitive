import java.util.*;
import java.io.*;
class lp{ 
static PrintWriter out = new PrintWriter(System.out);
static long mod = 1000000007;
static int dx[] = {1,-1,0,0};
static int dy[] = {0,0,-1,1};
static int getSum(int BIT[], int index) 
{ 
    int sum = 0; 
    while (index > 0) 
    { 
        sum += BIT[index];
        index -= index & (-index); 
    } 
    return sum; 
} 
static void update(int BIT[], int index, int val) 
{ 
    while (index <=26) 
    { 
       BIT[index] += val; 
       index += index & (-index); 
    } 
} 
  
static int solve(char a[],int n)
{
        int BIT[] = new int[27];
        update(BIT, (int)(a[0]-'a') +1,1);
        int inv=0;
        for(int i=1;i<n;i++)
         {
              inv = (inv +  getSum(BIT,26)-getSum(BIT,(int)(a[i]-'a')+1))%2; 
               update(BIT, (int)(a[i]-'a') +1,1);
         }
     return inv;
}
public static void main(String[] args){

      int t= ni();
for(int o=1;o<=t;o++)
{
     int n = ni();
     char a[] = n().toCharArray();
     char b[] = n().toCharArray();
     char c[] = n().toCharArray();
     int ca[] = new int[26];
     int cb[] = new int[26];
     int cc[] = new int[26];
    
     for(int i=0;i<n;i++)
       {
           ca[a[i]-'a']++;
           cb[b[i]-'a']++;
           cc[c[i]-'a']++;
       }
    int f=0,ct=0;
     for(int i=0;i<26;i++){
       if(ca[i]==cb[i]&&cb[i]==cc[i])
          ct = Math.max(ct,ca[i]); 
       else
          { f=1; break;} 
     }
     if(f==1)
      { pn("NO");continue;}
     if(ct>1)
      { pn("YES"); continue;}
     int inva=solve(a,n);
     int invb=solve(b,n);
     int invc=solve(c,n);
  
     if((inva==1&&invb==1&&invc==1)||(inva==0&&invb==0&&invc==0))
            pn("YES");
     else
            pn("NO");    
}
       out.flush();  
}
 
static void p(Object o)
{
   out.print(o);
}
static void pn(Object o){
    out.println(o);
}
static int abs(int x)
{
    return x>0 ? x : -x;
}
static long gcd(long a,long b)
{
       if(b%a==0)
          return a;
          return gcd(b%a,a);
}
static void subtract_1(char s[]) // it will subtract 1 from the given number.  number should be positive
{
      if(s[0]=='0') // number is zero
          return;
     int n = s.length,i=n-1;
     while(s[i]=='0')
       i--;
     s[i] = (char)((int)(s[i]-'0') + 47);
   
     for(int j=i+1;j<n;j++)
         s[j]='9';
}
static long pow(long a,long b,long md){
 
    long ans=1;
    while(b>0)
    {
         if(b%2==1)
           ans = (ans*a)%md;
           a = (a*a)%md;
           b = b/2;
    }
   return ans;
}
static long min(long a,long b){
 
     return a<b ? a : b;
}
static long max(long a,long b){
     return a>b ? a : b;
}
static boolean pal(String s)
{
   int n = s.length(),i1=0,i2=n-1;
 
     while(i1<i2)
     {
        if(s.charAt(i1)!=s.charAt(i2))
             return false;
             i1++; i2--;
     }
       return true;
}
static String rev(String r)
{
    String s = "";
    int i= r.length()-1;
 
    while(i>=0)
    {
        s=s+r.charAt(i);
        i--;   
    }
       return s;
}
static FastReader sc=new FastReader(); 
 
      static int ni(){
                 int x = sc.nextInt();
                 return(x);
        }
      static long nl(){
              long x = sc.nextLong();
              return(x);
         }
      static String n(){
                 String str = sc.next();
                     return(str);
       }
     static String ns(){
                 String str = sc.nextLine();
                   return(str);
      }
     static double nd(){
               double d = sc.nextDouble();
                 return(d);
       }
  static class FastReader 
    { 
        BufferedReader br; 
        StringTokenizer st; 
  
        public FastReader() 
        { 
            br = new BufferedReader(new
                     InputStreamReader(System.in)); 
        } 
  
        String next() 
        { 
            while (st == null || !st.hasMoreElements()) 
            { 
                try
                { 
                    st = new StringTokenizer(br.readLine()); 
                } 
                catch (IOException  e) 
                { 
                    e.printStackTrace(); 
                } 
            } 
            return st.nextToken(); 
        } 
  
        int nextInt() 
        { 
            return Integer.parseInt(next()); 
        } 
  
        long nextLong() 
        { 
            return Long.parseLong(next()); 
        } 
  
        double nextDouble() 
        { 
            return Double.parseDouble(next()); 
        } 
  
        String nextLine() 
        { 
            String str = ""; 
            try
            { 
                str = br.readLine(); 
            } 
            catch (IOException e) 
            { 
                e.printStackTrace(); 
            } 
            return str; 
        } 
    } 
}
